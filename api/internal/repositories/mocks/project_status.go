// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/project_status.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "api/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProjectStatusRepositoryInterface is a mock of ProjectStatusRepositoryInterface interface.
type MockProjectStatusRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectStatusRepositoryInterfaceMockRecorder
}

// MockProjectStatusRepositoryInterfaceMockRecorder is the mock recorder for MockProjectStatusRepositoryInterface.
type MockProjectStatusRepositoryInterfaceMockRecorder struct {
	mock *MockProjectStatusRepositoryInterface
}

// NewMockProjectStatusRepositoryInterface creates a new mock instance.
func NewMockProjectStatusRepositoryInterface(ctrl *gomock.Controller) *MockProjectStatusRepositoryInterface {
	mock := &MockProjectStatusRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProjectStatusRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectStatusRepositoryInterface) EXPECT() *MockProjectStatusRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectStatusRepositoryInterface) Create(newProjectStatus model.ProjectStatus) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newProjectStatus)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) Create(newProjectStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).Create), newProjectStatus)
}

// Delete mocks base method.
func (m *MockProjectStatusRepositoryInterface) Delete(projectStatus model.ProjectStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", projectStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) Delete(projectStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).Delete), projectStatus)
}

// Find mocks base method.
func (m *MockProjectStatusRepositoryInterface) Find(ID uint) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ID)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) Find(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).Find), ID)
}

// FindAll mocks base method.
func (m *MockProjectStatusRepositoryInterface) FindAll() ([]model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockProjectStatusRepositoryInterface) FindByName(name string) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).FindByName), name)
}

// FindByNameProject mocks base method.
func (m *MockProjectStatusRepositoryInterface) FindByNameProject(name string, projectID uint) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameProject", name, projectID)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameProject indicates an expected call of FindByNameProject.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) FindByNameProject(name, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameProject", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).FindByNameProject), name, projectID)
}

// UFindByNameProject mocks base method.
func (m *MockProjectStatusRepositoryInterface) UFindByNameProject(name string, projectID uint) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UFindByNameProject", name, projectID)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UFindByNameProject indicates an expected call of UFindByNameProject.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) UFindByNameProject(name, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UFindByNameProject", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).UFindByNameProject), name, projectID)
}

// Update mocks base method.
func (m *MockProjectStatusRepositoryInterface) Update(projectStatus, updatedProjectStatus model.ProjectStatus) (model.ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", projectStatus, updatedProjectStatus)
	ret0, _ := ret[0].(model.ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectStatusRepositoryInterfaceMockRecorder) Update(projectStatus, updatedProjectStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectStatusRepositoryInterface)(nil).Update), projectStatus, updatedProjectStatus)
}
