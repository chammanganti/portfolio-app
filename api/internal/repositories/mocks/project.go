// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/project.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "api/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProjectRepositoryInterface is a mock of ProjectRepositoryInterface interface.
type MockProjectRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryInterfaceMockRecorder
}

// MockProjectRepositoryInterfaceMockRecorder is the mock recorder for MockProjectRepositoryInterface.
type MockProjectRepositoryInterfaceMockRecorder struct {
	mock *MockProjectRepositoryInterface
}

// NewMockProjectRepositoryInterface creates a new mock instance.
func NewMockProjectRepositoryInterface(ctrl *gomock.Controller) *MockProjectRepositoryInterface {
	mock := &MockProjectRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepositoryInterface) EXPECT() *MockProjectRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectRepositoryInterface) Create(newProject model.Project) (model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newProject)
	ret0, _ := ret[0].(model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Create(newProject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Create), newProject)
}

// Delete mocks base method.
func (m *MockProjectRepositoryInterface) Delete(project model.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Delete(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Delete), project)
}

// Find mocks base method.
func (m *MockProjectRepositoryInterface) Find(ID uint) (model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ID)
	ret0, _ := ret[0].(model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Find(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Find), ID)
}

// FindAll mocks base method.
func (m *MockProjectRepositoryInterface) FindAll() ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProjectRepositoryInterfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockProjectRepositoryInterface) FindByName(name string) (model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockProjectRepositoryInterfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).FindByName), name)
}

// UFindByName mocks base method.
func (m *MockProjectRepositoryInterface) UFindByName(name string) (model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UFindByName", name)
	ret0, _ := ret[0].(model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UFindByName indicates an expected call of UFindByName.
func (mr *MockProjectRepositoryInterfaceMockRecorder) UFindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UFindByName", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).UFindByName), name)
}

// Update mocks base method.
func (m *MockProjectRepositoryInterface) Update(project, updatedProject model.Project) (model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", project, updatedProject)
	ret0, _ := ret[0].(model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Update(project, updatedProject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Update), project, updatedProject)
}
